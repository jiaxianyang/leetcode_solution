//颠倒给定的 32 位无符号整数的二进制位。 
//
// 提示： 
//
// 
// 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的
//还是无符号的，其内部的二进制表示形式都是相同的。 
// 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在 示例 2 中，输入表示有符号整数 -3，输出表示有符号整数 -1073741825。
// 
// 
//
// 
//
// 示例 1： 
//
// 
//输入：n = 00000010100101000001111010011100
//输出：964176192 (00111001011110000010100101000000)
//解释：输入的二进制串 00000010100101000001111010011100 表示无符号整数 43261596，
//     因此返回 964176192，其二进制表示形式为 00111001011110000010100101000000。 
//
// 示例 2： 
//
// 
//输入：n = 11111111111111111111111111111101
//输出：3221225471 (10111111111111111111111111111111)
//解释：输入的二进制串 11111111111111111111111111111101 表示无符号整数 4294967293，
//     因此返回 3221225471 其二进制表示形式为 10111111111111111111111111111111 。 
//
// 
//
// 提示： 
//
// 
// 输入是一个长度为 32 的二进制字符串 
// 
//
// 
//
// 进阶: 如果多次调用这个函数，你将如何优化你的算法？ 
//
// Related Topics 位运算 分治 👍 728 👎 0

package com.rj.leetcode_solution.leetcode.editor.cn;
//java:颠倒二进制位
class P190ReverseBits{
    public static void main(String[] args){
        Solution solution = new P190ReverseBits().new Solution();
    }
    //leetcode submit region begin(Prohibit modification and deletion)
public class Solution {
    // you need treat n as an unsigned value
    public int reverseBits(int n) {
        int rev = 0; // 用于存储反转后的结果
        for (int i = 0; i < 32 && n != 0; i++) { // 遍历每一位，总共32位
            rev |= (n & 1) << (31 - i); // 将 n 的最低位放到 rev 的相应位置
            n >>>= 1; // 右移 n，处理下一位
        }
        return rev; // 返回反转后的结果


//        2. **第一次循环（i = 0）**：
//        - `n & 1`：`00000000000000000000000000001101 & 00000000000000000000000000000001` 结果为 `1`。
//        - `1 << (31 - 0)`：将 `1` 左移 31 位，结果为 `10000000000000000000000000000000`。
//        - `rev |= 10000000000000000000000000000000`：`rev` 更新为 `10000000000000000000000000000000`。
//        - `n >>>= 1`：`n` 右移一位，结果为 `00000000000000000000000000000110`。
//
//        3. **第二次循环（i = 1）**：
//        - `n & 1`：`00000000000000000000000000000110 & 00000000000000000000000000000001` 结果为 `0`。
//        - `0 << (31 - 1)`：将 `0` 左移 30 位，结果为 `0`。
//        - `rev |= 0`：`rev` 保持不变 `10000000000000000000000000000000`。
//        - `n >>>= 1`：`n` 右移一位，结果为 `00000000000000000000000000000011`。
//
//        4. **第三次循环（i = 2）**：
//        - `n & 1`：`00000000000000000000000000000011 & 00000000000000000000000000000001` 结果为 `1`。
//        - `1 << (31 - 2)`：将 `1` 左移 29 位，结果为 `00100000000000000000000000000000`。
//        - `rev |= 00100000000000000000000000000000`：`rev` 更新为 `10100000000000000000000000000000`。
//        - `n >>>= 1`：`n` 右移一位，结果为 `00000000000000000000000000000001`。
//
//        5. **第四次循环（i = 3）**：
//        - `n & 1`：`00000000000000000000000000000001 & 00000000000000000000000000000001` 结果为 `1`。
//        - `1 << (31 - 3)`：将 `1` 左移 28 位，结果为 `00010000000000000000000000000000`。
//        - `rev |= 00010000000000000000000000000000`：`rev` 更新为 `10110000000000000000000000000000`。
//        - `n >>>= 1`：`n` 右移一位，结果为 `00000000000000000000000000000000`。
//
//        6. **后续循环（i = 4 到 31）**：
//        - 因为 `n` 已经变为 `0`，循环条件 `n != 0` 不再满足，所以循环提前退出。
//
//        7. **返回反转结果**：
    }
}
//leetcode submit region end(Prohibit modification and deletion)

}